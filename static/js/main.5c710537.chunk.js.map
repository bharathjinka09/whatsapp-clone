{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.jsx","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","SearchOutlined","placeholder","type","room","key","Chat","input","setInput","setRoomName","roomId","useParams","Date","length","timestamp","toDate","toLocaleString","AttachFile","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c710537.chunk.js","sourcesContent":["import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDWgUyU3ilm9sdYz82yUnYjTfy8kPZG_Is\",\n  authDomain: \"whatsapp-clone-c7141.firebaseapp.com\",\n  databaseURL: \"https://whatsapp-clone-c7141.firebaseio.com\",\n  projectId: \"whatsapp-clone-c7141\",\n  storageBucket: \"whatsapp-clone-c7141.appspot.com\",\n  messagingSenderId: \"452362295210\",\n  appId: \"1:452362295210:web:29c1e56f708d779f0dfdd3\",\n  measurementId: \"G-WW8MPHN2VP\",\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport {auth,provider}\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport \"./SidebarChat.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport db from './firebase'\nimport {Link} from \"react-router-dom\"\n\nfunction SidebarChat({ id,name,addNewChat }) {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  useEffect(() => {\n    if(id){\n      db.collection('rooms')\n        .doc(id)\n        .collection('messages')\n        .orderBy('timestamp','desc')\n        .onSnapshot((snapshot) => \n          setMessages(snapshot.docs.map((doc) => \n            doc.data()))  \n      );\n    }\n  }, [id]);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter a chat group name!\")\n    if(roomName){\n      // todo\n      // alert(roomName)\n      db.collection('rooms').add({\n        name: roomName\n      })\n    }\n\n  };\n\n  return !addNewChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"sidebarChat\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"sidebarChat__info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={createChat} className=\"sidebarChat\">\n      <h2>Add Chat Group</h2>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, { createContext,useContext,useReducer } from 'react'\n\nexport const StateContext = createContext()\n\nexport const StateProvider = ({reducer,initialState,children}) => (\n\t\t<StateContext.Provider value={useReducer(reducer,initialState)}>\n\t\t{children}\n\t\t</StateContext.Provider>\n\t);\n\nexport const useStateValue = () => useContext(StateContext)","import React, {useState,useEffect} from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport \"./Sidebar.css\";\nimport db from './firebase'\nimport { useStateValue } from './StateProvider'\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([])\n  const [{user},dispatch] = useStateValue()\n\n  useEffect(() => {\n   const unsubscribe = db.collection('rooms').onSnapshot((snapshot)=>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n        id: doc.id,\n        data: doc.data()\n      }))\n      )\n    );\n\n    return () => {\n      unsubscribe()\n    }\n  },[]);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={user?.photoURL} />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlined />\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat addNewChat />\n        {rooms.map(room=> (\n          <SidebarChat key={room.id} id={room.id} \n          name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { AttachFile, MoreVert, SearchOutlined } from \"@material-ui/icons\";\nimport {useParams} from \"react-router-dom\"\nimport \"./Chat.css\";\nimport db from \"./firebase\";\nimport { useStateValue } from './StateProvider'\nimport firebase from \"firebase\"\n\nfunction Chat() {\n  const [input, setInput] = useState(\"\");\n  const [seed, setSeed] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [{user},dispatch] = useStateValue()\n  const {roomId} = useParams()\n\n  useEffect(() => {\n    if (roomId){\n      db.collection('rooms').doc(roomId)\n      .onSnapshot(snapshot => (\n          setRoomName(snapshot.data().name)\n        ))\n\n      db.collection('rooms')\n        .doc(roomId)\n        .collection('messages')\n        .orderBy('timestamp','asc')\n        .onSnapshot(snapshot=> \n          setMessages(snapshot.docs.map((doc) => doc.data()))\n          )\n    }\n  }, [roomId])\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, [roomId]);\n\n  const sendMessage = (e) => {\n      e.preventDefault()\n      console.log('you typed',input)\n\n      db.collection('rooms').doc(roomId).collection('messages').add({\n        message: input,\n        name: user.displayName,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n\n      setInput('')\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"chat__headerInfo\">\n          <h3>{roomName}</h3>\n          <p>Last seen {\" \"}\n          {new Date(\n              messages[messages.length-1]?.\n              timestamp?.toDate()\n            ).toLocaleString()}</p>\n        </div>\n\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p key={message.id} className={`chat__message ${message.name === user.displayName && \"chat__reciever\"}`}>\n            <span className=\"chat__name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat__timestamp\">\n              {new Date(message.timestamp?.toDate()).toLocaleString()}\n            </span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chat__footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage} type=\"submit\">\n            Send a message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","export const initialState = {\n\tuser:null,\n}\n\nexport const actionTypes = {\n\tSET_USER : 'SET_USER',\n}\n\nconst reducer = (state,action) => {\n\tconsole.log(action)\n\tswitch (action.type){\n\t\tcase actionTypes.SET_USER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: action.user,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport './Login.css'\nimport { auth,provider } from './firebase'\nimport { actionTypes } from './reducer'\nimport { useStateValue } from './StateProvider'\n\nfunction Login(){\n\tconst [{},dispatch] = useStateValue()\n\n\tconst signIn = () => {\n\t\tauth\n\t\t\t.signInWithPopup(provider)\n\t\t\t.then((result) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: actionTypes.SET_USER,\n\t\t\t\t\tuser: result.user\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch((error) => alert(error.message))\n\t};\n\n\treturn (\n\t\t<div className=\"login\">\n\t\t\t<div className=\"login__container\">\n\t\t\t\t<img src='https://i.pinimg.com/originals/79/dc/31/79dc31280371b8ffbe56ec656418e122.png' alt='Login' />\n\t\t\t\t\n\t\t\t\t<div className=\"login__text\">\n\t\t\t\t\t<h1>Sign in to Whatsapp</h1>\n\t\t\t\t</div>\n\n\t\t\t\t<Button onClick={signIn}>\n\t\t\t\t\tSign in with Google\n\t\t\t\t</Button>\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Login","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport {BrowserRouter as Router, Route,Switch} from \"react-router-dom\"\nimport {useStateValue } from './StateProvider'\n\n\nfunction App() {\n\tconst [{ user }, dispatch] = useStateValue()\n\n  \n  return (\n    <div className=\"app\">\n    \t{!user ? (\n    \t\t<Login />\n    \t):(\n      <div className=\"app__body\">\n      <Router>\n        <Sidebar />\n      <Switch>\n      <Route path=\"/rooms/:roomId\">\n        <Chat />\n      </Route>\n      <Route path=\"/\">\n        <Chat />\n      </Route>\n      </Switch>\n      </Router>\n\n      </div>\n    )}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer,{ initialState } from './reducer'\nimport { StateProvider } from './StateProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n\t  <StateProvider initialState={initialState}\n\t  reducer={reducer}>\n\t    <App />\n\t  </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}