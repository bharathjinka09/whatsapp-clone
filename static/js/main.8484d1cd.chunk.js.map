{"version":3,"sources":["SidebarChat.js","Sidebar.jsx","Chat.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","addNewChat","useState","seed","setSeed","useEffect","Math","floor","random","onClick","prompt","className","Avatar","src","Sidebar","IconButton","SearchOutlined","placeholder","type","Chat","AttachFile","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sZAmCeA,MA/Bf,YAAsC,IAAfC,EAAc,EAAdA,WAAc,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAgBnC,OAbAC,qBAAU,WACRD,EAAQE,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAWKP,EASN,yBAAKQ,QAlBY,WACAC,OAAO,sBAiBEC,UAAU,eAClC,6CATF,yBAAKA,UAAU,eACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,iDAA4CV,EAA5C,UACX,yBAAKQ,UAAU,qBACb,yCACA,iD,MCiBOG,MAjCf,WACE,OACE,yBAAKH,UAAU,WACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,wBACb,kBAACI,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,4BACb,kBAACK,EAAA,EAAD,MACA,2BAAOC,YAAY,2BAA2BC,KAAK,WAGvD,yBAAKP,UAAU,kBACb,kBAAC,EAAD,CAAaV,YAAU,IACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,sBCGOkB,MAlCf,WAAiB,IAAD,EACUjB,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,KAOd,OAJAC,qBAAU,WACRD,EAAQE,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAGD,yBAAKG,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,iDAA4CV,EAA5C,UACX,yBAAKQ,UAAU,oBACb,yCACA,+CAGF,yBAAKA,UAAU,qBACb,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAEF,kBAACD,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,OAEF,kBAACL,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKJ,UAAU,eACf,yBAAKA,UAAU,mBCjBNU,MAZf,WACE,OACE,yBAAKV,UAAU,OAEb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8484d1cd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./SidebarChat.css\";\nimport { Avatar } from \"@material-ui/core\";\n\nfunction SidebarChat({ addNewChat }) {\n  const [seed, setSeed] = useState(\"\");\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name\")\n    if(roomName){\n      // todo\n      // alert(roomName)\n    }\n\n  };\n\n  return !addNewChat ? (\n    <div className=\"sidebarChat\">\n      <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n      <div className=\"sidebarChat__info\">\n        <h2>Room name</h2>\n        <p>Last message...</p>\n      </div>\n    </div>\n  ) : (\n    <div onClick={createChat} className=\"sidebarChat\">\n      <h2>Add new Chat</h2>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport \"./Sidebar.css\";\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlined />\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat addNewChat />\n        <SidebarChat />\n        <SidebarChat />\n        <SidebarChat />\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport { AttachFile,MoreVert,SearchOutlined } from \"@material-ui/icons\";\nimport \"./Chat.css\";\n\nfunction Chat() {\n  const [seed, setSeed] = useState(\"\");\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"chat__headerInfo\">\n          <h3>Room name</h3>\n          <p>Last seen at...</p>\n        </div>\n\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\"></div>\n      <div className=\"chat__footer\"></div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1>Whatsapp Clone</h1> */}\n      <div className=\"app__body\">\n        <Sidebar />\n        <Chat />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}